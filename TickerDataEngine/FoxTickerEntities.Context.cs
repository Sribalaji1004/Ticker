//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ticker.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class FoxTickerEntities : DbContext
    {
        public FoxTickerEntities()
            : base("name=FoxTickerEntities")
        {
            this.Configuration.LazyLoadingEnabled = false;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Group> Groups { get; set; }
        public DbSet<Note> Notes { get; set; }
        public DbSet<Client> Clients { get; set; }
        public DbSet<Team> Teams { get; set; }
        public DbSet<PlaylistDetail> PlaylistDetails { get; set; }
        public DbSet<Playlist> Playlists { get; set; }
        public DbSet<Game> Games { get; set; }
        public DbSet<Sport> Sports { get; set; }
        public DbSet<Status> Statuses { get; set; }
        public DbSet<GameNote> GameNotes { get; set; }
        public DbSet<ClientTeam> ClientTeams { get; set; }
        public DbSet<ClientSport> ClientSports { get; set; }
        public DbSet<GroupAnimationType> GroupAnimationTypes { get; set; }
        public DbSet<User> Users { get; set; }
        public DbSet<GameHiveNote> GameHiveNotes { get; set; }
        public DbSet<auth_admin_log> auth_admin_log { get; set; }
        public DbSet<auth_content_type> auth_content_type { get; set; }
        public DbSet<GroupGame> GroupGames { get; set; }
        public DbSet<BreakingNew> BreakingNews { get; set; }
        public DbSet<BreakingNewsType> BreakingNewsTypes { get; set; }
        public DbSet<BreakingNewsExpirationMode> BreakingNewsExpirationModes { get; set; }
        public DbSet<GameStatus> GameStatuses { get; set; }
        public DbSet<PlaylistType> PlaylistTypes { get; set; }
        public DbSet<LeaguesSetting> LeaguesSettings { get; set; }
        public DbSet<Setting> Settings { get; set; }
        public DbSet<SettingsOption> SettingsOptions { get; set; }
    
        public virtual ObjectResult<spTICK_GameNotes_GetByGameID_Result> spTICK_GameNotes_GetByGameID(Nullable<int> gameID, Nullable<int> clientID)
        {
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_GameNotes_GetByGameID_Result>("spTICK_GameNotes_GetByGameID", gameIDParameter, clientIDParameter);
        }
    
        public virtual ObjectResult<spTICK_Games_GetByEntryID_Result> spTICK_Games_GetByEntryID(Nullable<int> clientID, Nullable<int> entryID, Nullable<int> entryTypeID, Nullable<bool> onlyFinals, Nullable<bool> onlySorted)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var entryIDParameter = entryID.HasValue ?
                new ObjectParameter("EntryID", entryID) :
                new ObjectParameter("EntryID", typeof(int));
    
            var entryTypeIDParameter = entryTypeID.HasValue ?
                new ObjectParameter("EntryTypeID", entryTypeID) :
                new ObjectParameter("EntryTypeID", typeof(int));
    
            var onlyFinalsParameter = onlyFinals.HasValue ?
                new ObjectParameter("OnlyFinals", onlyFinals) :
                new ObjectParameter("OnlyFinals", typeof(bool));
    
            var onlySortedParameter = onlySorted.HasValue ?
                new ObjectParameter("OnlySorted", onlySorted) :
                new ObjectParameter("OnlySorted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Games_GetByEntryID_Result>("spTICK_Games_GetByEntryID", clientIDParameter, entryIDParameter, entryTypeIDParameter, onlyFinalsParameter, onlySortedParameter);
        }
    
        public virtual ObjectResult<spTICK_Notes_GetByGroup_Result> spTICK_Notes_GetByGroup(Nullable<int> groupID, Nullable<int> clientID)
        {
            var groupIDParameter = groupID.HasValue ?
                new ObjectParameter("GroupID", groupID) :
                new ObjectParameter("GroupID", typeof(int));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Notes_GetByGroup_Result>("spTICK_Notes_GetByGroup", groupIDParameter, clientIDParameter);
        }
    
        public virtual ObjectResult<spTICK_ScoreAlerts_Get_FTL_Result> spTICK_ScoreAlerts_Get_FTL(Nullable<int> clientID, Nullable<int> sportID, string clientIP)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            var clientIPParameter = clientIP != null ?
                new ObjectParameter("ClientIP", clientIP) :
                new ObjectParameter("ClientIP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_ScoreAlerts_Get_FTL_Result>("spTICK_ScoreAlerts_Get_FTL", clientIDParameter, sportIDParameter, clientIPParameter);
        }
    
        public virtual int spTICK_ScoreAlert_SetClientComplete(Nullable<int> clientID, Nullable<int> gameID, string clientIP)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var gameIDParameter = gameID.HasValue ?
                new ObjectParameter("GameID", gameID) :
                new ObjectParameter("GameID", typeof(int));
    
            var clientIPParameter = clientIP != null ?
                new ObjectParameter("ClientIP", clientIP) :
                new ObjectParameter("ClientIP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_ScoreAlert_SetClientComplete", clientIDParameter, gameIDParameter, clientIPParameter);
        }
    
        public virtual ObjectResult<spTICK_ScoreAlerts_Get_Result> spTICK_ScoreAlerts_Get(Nullable<int> clientID, Nullable<int> sportID, string clientIP)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            var clientIPParameter = clientIP != null ?
                new ObjectParameter("ClientIP", clientIP) :
                new ObjectParameter("ClientIP", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_ScoreAlerts_Get_Result>("spTICK_ScoreAlerts_Get", clientIDParameter, sportIDParameter, clientIPParameter);
        }
    
        public virtual ObjectResult<spTICK_Games_Get_Result> spTICK_Games_Get(Nullable<int> clientID, Nullable<int> sportID, Nullable<bool> priorResults, Nullable<bool> onlyFinals, Nullable<bool> onlySorted)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            var priorResultsParameter = priorResults.HasValue ?
                new ObjectParameter("PriorResults", priorResults) :
                new ObjectParameter("PriorResults", typeof(bool));
    
            var onlyFinalsParameter = onlyFinals.HasValue ?
                new ObjectParameter("OnlyFinals", onlyFinals) :
                new ObjectParameter("OnlyFinals", typeof(bool));
    
            var onlySortedParameter = onlySorted.HasValue ?
                new ObjectParameter("OnlySorted", onlySorted) :
                new ObjectParameter("OnlySorted", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Games_Get_Result>("spTICK_Games_Get", clientIDParameter, sportIDParameter, priorResultsParameter, onlyFinalsParameter, onlySortedParameter);
        }
    
        public virtual int spTICK_Importer_GameCreate(Nullable<int> sportID, Nullable<int> visitorsID, Nullable<int> homeID, Nullable<int> visitorsScore, Nullable<int> homeScore, string clock, Nullable<int> gameStatusID, string status, Nullable<System.DateTime> gameDateTime, Nullable<int> sortOrder)
        {
            var sportIDParameter = sportID.HasValue ?
                new ObjectParameter("SportID", sportID) :
                new ObjectParameter("SportID", typeof(int));
    
            var visitorsIDParameter = visitorsID.HasValue ?
                new ObjectParameter("VisitorsID", visitorsID) :
                new ObjectParameter("VisitorsID", typeof(int));
    
            var homeIDParameter = homeID.HasValue ?
                new ObjectParameter("HomeID", homeID) :
                new ObjectParameter("HomeID", typeof(int));
    
            var visitorsScoreParameter = visitorsScore.HasValue ?
                new ObjectParameter("VisitorsScore", visitorsScore) :
                new ObjectParameter("VisitorsScore", typeof(int));
    
            var homeScoreParameter = homeScore.HasValue ?
                new ObjectParameter("HomeScore", homeScore) :
                new ObjectParameter("HomeScore", typeof(int));
    
            var clockParameter = clock != null ?
                new ObjectParameter("Clock", clock) :
                new ObjectParameter("Clock", typeof(string));
    
            var gameStatusIDParameter = gameStatusID.HasValue ?
                new ObjectParameter("GameStatusID", gameStatusID) :
                new ObjectParameter("GameStatusID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var gameDateTimeParameter = gameDateTime.HasValue ?
                new ObjectParameter("GameDateTime", gameDateTime) :
                new ObjectParameter("GameDateTime", typeof(System.DateTime));
    
            var sortOrderParameter = sortOrder.HasValue ?
                new ObjectParameter("SortOrder", sortOrder) :
                new ObjectParameter("SortOrder", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Importer_GameCreate", sportIDParameter, visitorsIDParameter, homeIDParameter, visitorsScoreParameter, homeScoreParameter, clockParameter, gameStatusIDParameter, statusParameter, gameDateTimeParameter, sortOrderParameter);
        }
    
        public virtual ObjectResult<spTICK_Group_GetByType_Result> spTICK_Group_GetByType(Nullable<int> clientID, string type)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Group_GetByType_Result>("spTICK_Group_GetByType", clientIDParameter, typeParameter);
        }
    
        public virtual ObjectResult<string> spTICK_GroupTypes_Get(Nullable<int> clientID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("spTICK_GroupTypes_Get", clientIDParameter);
        }
    
        public virtual ObjectResult<spTICK_Users_Get_Result> spTICK_Users_Get(string uname)
        {
            var unameParameter = uname != null ?
                new ObjectParameter("Uname", uname) :
                new ObjectParameter("Uname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Users_Get_Result>("spTICK_Users_Get", unameParameter);
        }
    
        public virtual int spTICK_Playlist_Stage(Nullable<int> clientID, Nullable<int> playlistID, Nullable<bool> stageFlag)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var playlistIDParameter = playlistID.HasValue ?
                new ObjectParameter("PlaylistID", playlistID) :
                new ObjectParameter("PlaylistID", typeof(int));
    
            var stageFlagParameter = stageFlag.HasValue ?
                new ObjectParameter("StageFlag", stageFlag) :
                new ObjectParameter("StageFlag", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spTICK_Playlist_Stage", clientIDParameter, playlistIDParameter, stageFlagParameter);
        }
    
        public virtual ObjectResult<spTICK_Playlists_Get_Result> spTICK_Playlists_Get(Nullable<int> clientID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Playlists_Get_Result>("spTICK_Playlists_Get", clientIDParameter);
        }
    
        public virtual ObjectResult<spTICK_Playlist_Details_Get_Result> spTICK_Playlist_Details_Get(Nullable<int> playlistID)
        {
            var playlistIDParameter = playlistID.HasValue ?
                new ObjectParameter("PlaylistID", playlistID) :
                new ObjectParameter("PlaylistID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spTICK_Playlist_Details_Get_Result>("spTICK_Playlist_Details_Get", playlistIDParameter);
        }
    }
}
